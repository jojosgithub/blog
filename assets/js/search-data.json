{
  
    
        "post0": {
            "title": "Code snippets",
            "content": "to create a data set with n colums with same mean and standard deviation | . number_of_rows &lt;- 10 number_of_cols &lt;- 20 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame(replicate(number_of_cols, rnorm(n=number_of_rows, mean=my_mean, sd=my_sd ))) #we are creating a dataframe from a matrix obtained replicating x the desired number_of_cols a vector of length number_of_rows from a normal distribution rnorm with a mean of my mean and standard deviation as sd newdat . A data.frame: 10 × 20 V1V2V3V4V5V6V7V8V9V10V11V12V13V14V15V16V17V18V19V20 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.964131 | 2.084326 | 2.3259616 | 2.252262 | 1.5192453 | 2.7975576 | 1.686465 | 0.973091 | 2.033342 | 1.379359 | 2.443602 | 2.595167 | 2.1718489 | 1.493492 | 1.470648 | 1.8594637 | 2.313265 | 2.502223 | 1.377269 | 2.688028 | . 1.018831 | 1.314867 | 1.8818561 | 2.375355 | 2.3374133 | 2.2719469 | 1.543413 | 1.255784 | 2.324018 | 1.647174 | 2.305548 | 1.673826 | 1.7835950 | 1.564699 | 1.319541 | 1.6939835 | 1.775101 | 1.942928 | 1.912872 | 2.420714 | . 1.459437 | 1.937060 | 2.6589053 | 1.585592 | 1.5419611 | 1.1715715 | 1.167269 | 3.062655 | 1.715445 | 2.598280 | 2.013009 | 1.594052 | 0.9814385 | 2.422080 | 2.474974 | 2.1652469 | 2.440753 | 1.546870 | 1.236180 | 2.736219 | . 2.075586 | 2.558730 | 0.8023778 | 2.354774 | 2.1426619 | 2.0510499 | 2.208406 | 2.813101 | 1.701212 | 2.984576 | 2.098992 | 1.576129 | 1.7417966 | 1.167793 | 2.059814 | 2.2461096 | 2.557071 | 1.872676 | 1.986324 | 2.359344 | . 1.123937 | 2.351836 | 1.9431267 | 2.474958 | 2.1788505 | 1.4728769 | 1.144322 | 1.990378 | 2.513406 | 1.348185 | 1.600055 | 2.255677 | 2.1465866 | 1.900015 | 1.094588 | 2.3531424 | 2.115199 | 1.489263 | 1.995074 | 1.748956 | . 1.995601 | 1.615742 | 2.6390568 | 1.710572 | 2.5570390 | 0.9729915 | 2.160087 | 2.469330 | 2.840089 | 1.761018 | 1.989548 | 1.848126 | 1.6077243 | 1.800809 | 2.244817 | 1.9960951 | 1.977661 | 2.326236 | 2.183083 | 2.041453 | . 2.088529 | 2.427600 | 2.3643008 | 1.382699 | 1.9943484 | 2.4137110 | 1.480787 | 1.400985 | 2.028347 | 2.070486 | 2.276535 | 1.710343 | 1.4269723 | 2.662385 | 1.760214 | 1.7669574 | 1.040708 | 1.880563 | 2.009078 | 1.157699 | . 1.303438 | 3.082612 | 2.3631327 | 1.890615 | 0.9896026 | 1.0292280 | 2.261182 | 2.323588 | 1.360077 | 2.173713 | 1.387674 | 1.273184 | 2.6375230 | 2.419358 | 1.807278 | 0.7885423 | 2.760151 | 1.937366 | 2.327686 | 2.104326 | . 2.393583 | 1.928722 | 2.7955066 | 2.020455 | 2.3089526 | 2.8144859 | 2.372570 | 1.602221 | 1.937122 | 1.975076 | 2.058504 | 2.699814 | 1.1822217 | 1.698587 | 2.622031 | 2.5112884 | 2.127184 | 1.838046 | 1.994125 | 1.936027 | . 1.581438 | 2.604068 | 2.0524686 | 1.679117 | 1.9435900 | 1.8190361 | 2.116737 | 1.564190 | 2.306575 | 1.644091 | 1.434574 | 2.322403 | 1.4987401 | 2.463802 | 1.777354 | 2.5009060 | 2.197563 | 2.552756 | 2.050441 | 2.508601 | . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100,110,120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 50 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . A data.frame: 50 × 3 ABC . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 100.53700 | 111.9622 | 118.4621 | . 101.11915 | 107.7451 | 116.3052 | . 102.32051 | 110.6168 | 120.0672 | . 99.15749 | 112.0810 | 117.4851 | . 99.89597 | 111.5888 | 120.6027 | . 99.94225 | 111.7498 | 119.9459 | . 99.41714 | 108.8434 | 115.6762 | . 101.74829 | 111.1723 | 120.9012 | . 99.05981 | 113.9177 | 122.6108 | . 99.79943 | 106.6811 | 118.7413 | . 100.34563 | 107.4947 | 117.0146 | . 100.17598 | 112.9856 | 122.3928 | . 99.90505 | 113.7736 | 120.4508 | . 99.75893 | 112.9868 | 122.9942 | . 100.02080 | 112.1092 | 118.7651 | . 99.44290 | 110.7190 | 118.4288 | . 99.51163 | 110.0121 | 122.2259 | . 100.90029 | 112.4609 | 123.0419 | . 101.48701 | 107.1067 | 117.5442 | . 99.03262 | 113.3585 | 121.2467 | . 99.92788 | 109.6783 | 121.0712 | . 100.71970 | 112.8885 | 120.5947 | . 100.31429 | 109.3630 | 120.3976 | . 101.50546 | 113.7730 | 118.8795 | . 99.42091 | 109.9278 | 119.0100 | . 99.56451 | 109.1467 | 117.2845 | . 100.49716 | 111.3683 | 126.2495 | . 99.63177 | 108.8684 | 122.6043 | . 102.00327 | 110.3349 | 120.5378 | . 99.49293 | 113.1720 | 122.1719 | . 100.35641 | 106.6521 | 118.9520 | . 100.94670 | 108.2936 | 121.1280 | . 98.95987 | 110.3330 | 119.6282 | . 101.11301 | 113.7607 | 120.7661 | . 98.59252 | 111.6783 | 120.4151 | . 99.08853 | 108.6189 | 118.8585 | . 102.15101 | 110.5997 | 121.6274 | . 101.07023 | 110.7888 | 121.7688 | . 99.11569 | 109.7944 | 118.7037 | . 98.00214 | 110.1594 | 119.0031 | . 97.40581 | 107.9611 | 120.9417 | . 101.95145 | 110.7420 | 117.6893 | . 101.32950 | 108.0137 | 120.2981 | . 99.20850 | 111.9876 | 118.8529 | . 98.64154 | 107.6119 | 118.2404 | . 102.00207 | 112.0287 | 118.4357 | . 100.88686 | 112.6001 | 116.9007 | . 99.31096 | 112.3836 | 118.6734 | . 99.84526 | 115.3478 | 119.4641 | . 101.54456 | 106.1723 | 121.6592 | . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100,120,130,145) sds=c(10,20,40,10) dat &lt;- lapply(seq(1,length(means)), function(x) rnorm(number_of_rows,m=means[x],sds[x])) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 my_labels &lt;- sort(replicate(length(means), paste(sample(LETTERS[1:dictionary_size], names_length , replace=TRUE), collapse=&quot;&quot;))) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . A data.frame: 3 × 4 AJDCAFDGJHHI . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 101.03620 | 148.0520 | 100.5811 | 151.5095 | . 101.46831 | 151.8345 | 135.1555 | 138.0882 | . 99.87062 | 140.0476 | 189.0076 | 141.9761 | . to create sample names or labels (https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:26] # or &lt;- my_labels &lt;- LETTERS[1:26] # or arbitrary number of letters using roman letters as in the function # letters() or LETTERS() dictionary_size &lt;- 10 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace=TRUE), collapse=&quot;&quot;)) #sorted my_labels_sorted &lt;- sort(replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace=TRUE), collapse=&quot;&quot;))) #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) . &lt;ol class=list-inline&gt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &#39;f&#39; | &#39;g&#39; | &#39;h&#39; | &#39;i&#39; | &#39;j&#39; | &#39;k&#39; | &#39;l&#39; | &#39;m&#39; | &#39;n&#39; | &#39;o&#39; | &#39;p&#39; | &#39;q&#39; | &#39;r&#39; | &#39;s&#39; | &#39;t&#39; | &#39;u&#39; | &#39;v&#39; | &#39;w&#39; | &#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &#39;F&#39; | &#39;G&#39; | &#39;H&#39; | &#39;I&#39; | &#39;J&#39; | &#39;K&#39; | &#39;L&#39; | &#39;M&#39; | &#39;N&#39; | &#39;O&#39; | &#39;P&#39; | &#39;Q&#39; | &#39;R&#39; | &#39;S&#39; | &#39;T&#39; | &#39;U&#39; | &#39;V&#39; | &#39;W&#39; | &#39;X&#39; | &#39;Y&#39; | &#39;Z&#39; | &lt;/ol&gt;",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/useful-stuff.html",
            "relUrl": "/r/2021/05/24/useful-stuff.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jojosgithub.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jojosgithub.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jojosgithub.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}