{
  
    
        "post0": {
            "title": "GGplot Recipes jitter and boxplot",
            "content": "TOC . write a function for generating data | use of melt for rearranging data | create a base plot | add a boxplot to the base plot | add a jitter plot to the base plot | merge boxplot and jiiter plot | use different color schemes using color brewer package | add a label to selected points in the jiiter plot | use ggrepel to better visualize the label | write a function to automatically select points based on a custom filter | perform a t.test on data and use ggpubr to add brackets to a boxplot | . library(ggplot2) library(gridExtra) library(data.table) library(RColorBrewer) library(ggpubr) library(rstatix, warn.conflicts = FALSE) library(ggrepel) # building a function for generating data genDataset &lt;- function(number_of_rows,means,sds) { l &lt;- length(means) res &lt;- lapply(seq(1:l),function(x) eval(parse(text=paste(&quot;rnorm(&quot;,number_of_rows,&quot;,&quot;,means[x],&quot;)&quot;,sep=&quot;&quot;)))) data.frame((sapply(res,c))) return(res) } # generating data dat &lt;- genDataset(number_of_rows=100, means=c(90,100,105,105,101,103), sds=c(30,20,25,30,30,30)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) # rearranging table using melt from data.table dt.melt &lt;- melt(dt, id.vars=&quot;id&quot;) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) #creating base plot base &lt;- ggplot(dt.melt, aes(x=category, y=var1)) + labs(title = &quot;Title&quot;, x = &quot;xaxis lab&quot;, y = &quot;yaxis lab&quot;, subtitle = &quot;subtitle&quot;, tag = &quot;a&quot;) + theme_classic(base_size = 22) + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(size=22,face=&quot;bold&quot;), axis.text.y = element_text(size=22,face=&quot;bold&quot;)) #adding jiitter plot pv &lt;- base + geom_jitter( position = position_jitter(0.15), alpha=0.5,, size = 5) ph &lt;- pv + coord_flip() pvc &lt;- pv + aes(shape = category) phc &lt;- pvc + coord_flip() # preparing plot variations according to sequential, # diverging and qualitative scheme colors using color brewer pvc_grey &lt;- pvc + aes(color = category) + scale_color_grey() pvc_sequential &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) pvc_diverging &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) pvc_qualitative &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) phc_grey &lt;- phc + aes(color = category) + scale_color_grey() phc_sequential &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) phc_diverging &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) phc_qualitative &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) #visualizing the plot phc_grey phc_sequential phc_diverging phc_qualitative . uplim &lt;- 92 lowlim &lt;- 88 #using gg_text_repel in order to better visualize the labels p2 &lt;- ph + geom_text_repel(data=dt.melt[category==&quot;X1&quot;], aes(label=ifelse(((var1 &gt; uplim | var1 &lt; lowlim )), as.character(id),&#39;&#39;)), position = position_jitter(0.2,seed = 1),size=5) p2_sequential &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p2_diverging &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p2_qualitative &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) # making the process automatic # creating functions to highlight data depending on n sigma or # a delta from the min and max NormTextlim &lt;- function(x, nsigma){ limup &lt;- mean(x) + nsigma*sd(x) limlow &lt;- mean(x) - nsigma*sd(x) l &lt;- list(&quot;limup&quot;=limup,&quot;limlow&quot;=limlow) return(l) } Utextlim &lt;- function(x, ndiv){ nth_div &lt;- (max(x)-min(x))/ndiv limup &lt;- max(x) - nth_div limlow &lt;- min(x) + nth_div l &lt;- list(&quot;limup&quot;=limup,&quot;limlow&quot;=limlow) return(l) } # creating a category index unique_category &lt;- unique(dt.melt$category) p3 &lt;- ph + lapply(seq(1,length(unique_category)), function(x) geom_text_repel(data=dt.melt[category==as.character(unique_category[x])], aes(label=ifelse(((var1 &gt; Utextlim((dt.melt[category==as.character(unique_category[x])])$var1,10)$limup | var1 &lt; Utextlim((dt.melt[category==as.character(unique_category[x])])$var1,10)$limlow )), as.character(id),&#39;&#39;),size=5), position = position_jitter(0.2,seed = 1),size=5)) p3_sequential &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p3_diverging &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p3_qualitative &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) p3 p3_sequential p3_diverging p3_qualitative . p4 &lt;- p3 + geom_boxplot(alpha = 0) p4_sequential &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p4_diverging &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p4_qualitative &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) # different color schemes p4 p4_sequential p4_diverging p4_qualitative . library(dplyr, warn.conflicts = FALSE) library(rstatix, warn.conflicts = FALSE) #to later use the %&gt;% operator and using a pipe friendly framework to #perform t-tests #generating a new dataset dat &lt;- genDataset(number_of_rows=100,means=c(80,80,95,98),sds=c(5,5,1,1)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) # rearranging our table using melt dt.melt &lt;- melt(dt, id.vars=&quot;id&quot;) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) dt.melt$ncat &lt;- as.numeric(dt.melt$category) # performing statistical analysis # WARNING: be sure that criteria for applying the test # are met stat.test &lt;- dt.melt %&gt;% t_test(var1 ~ ncat) #loading library for plot with brackets library(ggpubr) #finding the max height for the brackets maxy &lt;- round(max(dt.melt$var1)) # creating the boxplot base2 &lt;- ggplot(dt.melt, aes(x=factor(ncat), y=var1)) + labs(title = &quot;Title&quot;, x = &quot;xaxis lab&quot;, y = &quot;yaxis lab&quot;, subtitle = &quot;subtitle&quot;, tag = &quot;a&quot;) + theme_classic(base_size = 22) + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(size=22,face=&quot;bold&quot;), axis.text.y = element_text(size=22,face=&quot;bold&quot;)) pbox &lt;- base2 + geom_boxplot(alpha = 0) #Since we don&#39;t want the bracked to be colored we need to prepare #the colored boxplot BEFORE applying the brackets pbox_sequential &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;Reds&quot;) pbox_diverging &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;RdGy&quot;) pbox_qualitative &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;RdYlBu&quot;) p5 &lt;- pbox + geom_bracket( aes(xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) # IMPORTANT: need to specify that we do not want to inherit.aes p5_sequential &lt;- pbox_sequential + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1) p5_diverging &lt;- pbox_diverging + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) p5_qualitative &lt;- pbox_qualitative + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) p5 p5_sequential . sessionInfo() . R version 4.0.2 (2020-06-22) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 18363) Matrix products: default locale: [1] LC_COLLATE=English_United States.1252 [2] LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] dplyr_1.0.0 ggrepel_0.8.2 rstatix_0.6.0 [4] ggpubr_0.4.0 RColorBrewer_1.1-2 data.table_1.14.1 [7] gridExtra_2.3 ggplot2_3.3.2 RevoUtils_11.0.2 [10] RevoUtilsMath_11.0.0 loaded via a namespace (and not attached): [1] pbdZMQ_0.3-3 tidyselect_1.1.0 repr_1.1.0 purrr_0.3.4 [5] haven_2.3.1 carData_3.0-4 colorspace_1.4-1 vctrs_0.3.1 [9] generics_0.0.2 htmltools_0.5.0 base64enc_0.1-3 rlang_0.4.6 [13] pillar_1.4.6 foreign_0.8-80 glue_1.4.1 withr_2.2.0 [17] readxl_1.3.1 uuid_0.1-4 lifecycle_0.2.0 munsell_0.5.0 [21] ggsignif_0.6.0 gtable_0.3.0 cellranger_1.1.0 zip_2.0.4 [25] evaluate_0.14 labeling_0.3 rio_0.5.16 forcats_0.5.0 [29] curl_3.3 broom_0.7.0 IRdisplay_0.7.0 Rcpp_1.0.5 [33] scales_1.1.1 backports_1.1.7 IRkernel_1.1 jsonlite_1.7.0 [37] abind_1.4-5 farver_2.0.3 hms_0.5.3 digest_0.6.25 [41] stringi_1.4.6 openxlsx_4.1.5 grid_4.0.2 tools_4.0.2 [45] magrittr_1.5 tibble_3.0.2 crayon_1.3.4 tidyr_1.1.0 [49] car_3.0-8 pkgconfig_2.0.3 ellipsis_0.3.1 R6_2.4.1 [53] compiler_4.0.2 .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/31/ggplot_recipes.html",
            "relUrl": "/r/2021/05/31/ggplot_recipes.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "GGplot Recipes jitter and boxplot",
            "content": "TOC . write a function for generating data | use of melt for rearranging data | create a base plot | add a boxplot to the base plot | add a jitter plot to the base plot | merge boxplot and jiiter plot | use different color schemes using color brewer package | add a label to selected points in the jiiter plot | use ggrepel to better visualize the label | write a function to automatically select points based on a custom filter | perform a t.test on data and use ggpubr to add brackets to a boxplot | . library(ggplot2) library(gridExtra) library(data.table) library(RColorBrewer) library(ggpubr) library(rstatix, warn.conflicts = FALSE) library(ggrepel) # building a function for generating data genDataset &lt;- function(number_of_rows,means,sds) { l &lt;- length(means) res &lt;- lapply(seq(1:l),function(x) eval(parse(text=paste(&quot;rnorm(&quot;,number_of_rows,&quot;,&quot;,means[x],&quot;)&quot;,sep=&quot;&quot;)))) data.frame((sapply(res,c))) return(res) } # generating data dat &lt;- genDataset(number_of_rows=100, means=c(90,100,105,105,101,103), sds=c(30,20,25,30,30,30)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) # rearranging table using melt from data.table dt.melt &lt;- melt(dt, id.vars=&quot;id&quot;) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) #creating base plot base &lt;- ggplot(dt.melt, aes(x=category, y=var1)) + labs(title = &quot;Title&quot;, x = &quot;xaxis lab&quot;, y = &quot;yaxis lab&quot;, subtitle = &quot;subtitle&quot;, tag = &quot;a&quot;) + theme_classic(base_size = 22) + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(size=22,face=&quot;bold&quot;), axis.text.y = element_text(size=22,face=&quot;bold&quot;)) #adding jiitter plot pv &lt;- base + geom_jitter( position = position_jitter(0.15), alpha=0.5,, size = 5) ph &lt;- pv + coord_flip() pvc &lt;- pv + aes(shape = category) phc &lt;- pvc + coord_flip() # preparing plot variations according to sequential, # diverging and qualitative scheme colors using color brewer pvc_grey &lt;- pvc + aes(color = category) + scale_color_grey() pvc_sequential &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) pvc_diverging &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) pvc_qualitative &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) phc_grey &lt;- phc + aes(color = category) + scale_color_grey() phc_sequential &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) phc_diverging &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) phc_qualitative &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) #visualizing the plot phc_grey phc_sequential phc_diverging phc_qualitative . uplim &lt;- 92 lowlim &lt;- 88 #using gg_text_repel in order to better visualize the labels p2 &lt;- ph + geom_text_repel(data=dt.melt[category==&quot;X1&quot;], aes(label=ifelse(((var1 &gt; uplim | var1 &lt; lowlim )), as.character(id),&#39;&#39;)), position = position_jitter(0.2,seed = 1),size=5) p2_sequential &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p2_diverging &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p2_qualitative &lt;- p2 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) # making the process automatic # creating functions to highlight data depending on n sigma or # a delta from the min and max NormTextlim &lt;- function(x, nsigma){ limup &lt;- mean(x) + nsigma*sd(x) limlow &lt;- mean(x) - nsigma*sd(x) l &lt;- list(&quot;limup&quot;=limup,&quot;limlow&quot;=limlow) return(l) } Utextlim &lt;- function(x, ndiv){ nth_div &lt;- (max(x)-min(x))/ndiv limup &lt;- max(x) - nth_div limlow &lt;- min(x) + nth_div l &lt;- list(&quot;limup&quot;=limup,&quot;limlow&quot;=limlow) return(l) } # creating a category index unique_category &lt;- unique(dt.melt$category) p3 &lt;- ph + lapply(seq(1,length(unique_category)), function(x) geom_text_repel(data=dt.melt[category==as.character(unique_category[x])], aes(label=ifelse(((var1 &gt; Utextlim((dt.melt[category==as.character(unique_category[x])])$var1,10)$limup | var1 &lt; Utextlim((dt.melt[category==as.character(unique_category[x])])$var1,10)$limlow )), as.character(id),&#39;&#39;),size=5), position = position_jitter(0.2,seed = 1),size=5)) p3_sequential &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p3_diverging &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p3_qualitative &lt;- p3 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) p3 p3_sequential p3_diverging p3_qualitative . p4 &lt;- p3 + geom_boxplot(alpha = 0) p4_sequential &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) p4_diverging &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) p4_qualitative &lt;- p4 + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) # different color schemes p4 p4_sequential p4_diverging p4_qualitative . library(dplyr, warn.conflicts = FALSE) library(rstatix, warn.conflicts = FALSE) #to later use the %&gt;% operator and using a pipe friendly framework to #perform t-tests #generating a new dataset dat &lt;- genDataset(number_of_rows=100,means=c(80,80,95,98),sds=c(5,5,1,1)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) # rearranging our table using melt dt.melt &lt;- melt(dt, id.vars=&quot;id&quot;) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) dt.melt$ncat &lt;- as.numeric(dt.melt$category) # performing statistical analysis # WARNING: be sure that criteria for applying the test # are met stat.test &lt;- dt.melt %&gt;% t_test(var1 ~ ncat) #loading library for plot with brackets library(ggpubr) #finding the max height for the brackets maxy &lt;- round(max(dt.melt$var1)) # creating the boxplot base2 &lt;- ggplot(dt.melt, aes(x=factor(ncat), y=var1)) + labs(title = &quot;Title&quot;, x = &quot;xaxis lab&quot;, y = &quot;yaxis lab&quot;, subtitle = &quot;subtitle&quot;, tag = &quot;a&quot;) + theme_classic(base_size = 22) + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(size=22,face=&quot;bold&quot;), axis.text.y = element_text(size=22,face=&quot;bold&quot;)) pbox &lt;- base2 + geom_boxplot(alpha = 0) #Since we don&#39;t want the bracked to be colored we need to prepare #the colored boxplot BEFORE applying the brackets pbox_sequential &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;Reds&quot;) pbox_diverging &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;RdGy&quot;) pbox_qualitative &lt;- pbox + aes(color = factor(ncat)) + scale_color_brewer(palette=&quot;RdYlBu&quot;) p5 &lt;- pbox + geom_bracket( aes(xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) # IMPORTANT: need to specify that we do not want to inherit.aes p5_sequential &lt;- pbox_sequential + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1) p5_diverging &lt;- pbox_diverging + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) p5_qualitative &lt;- pbox_qualitative + geom_bracket( inherit.aes = FALSE, aes( xmin = group1, xmax = group2, label = signif(p, 2)), data = stat.test, y.position = maxy, step.increase = 0.1 ) p5 p5_sequential . sessionInfo() . R version 4.0.2 (2020-06-22) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 18363) Matrix products: default locale: [1] LC_COLLATE=English_United States.1252 [2] LC_CTYPE=English_United States.1252 [3] LC_MONETARY=English_United States.1252 [4] LC_NUMERIC=C [5] LC_TIME=English_United States.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] dplyr_1.0.0 ggrepel_0.8.2 rstatix_0.6.0 [4] ggpubr_0.4.0 RColorBrewer_1.1-2 data.table_1.14.1 [7] gridExtra_2.3 ggplot2_3.3.2 RevoUtils_11.0.2 [10] RevoUtilsMath_11.0.0 loaded via a namespace (and not attached): [1] pbdZMQ_0.3-3 tidyselect_1.1.0 repr_1.1.0 purrr_0.3.4 [5] haven_2.3.1 carData_3.0-4 colorspace_1.4-1 vctrs_0.3.1 [9] generics_0.0.2 htmltools_0.5.0 base64enc_0.1-3 rlang_0.4.6 [13] pillar_1.4.6 foreign_0.8-80 glue_1.4.1 withr_2.2.0 [17] readxl_1.3.1 uuid_0.1-4 lifecycle_0.2.0 munsell_0.5.0 [21] ggsignif_0.6.0 gtable_0.3.0 cellranger_1.1.0 zip_2.0.4 [25] evaluate_0.14 labeling_0.3 rio_0.5.16 forcats_0.5.0 [29] curl_3.3 broom_0.7.0 IRdisplay_0.7.0 Rcpp_1.0.5 [33] scales_1.1.1 backports_1.1.7 IRkernel_1.1 jsonlite_1.7.0 [37] abind_1.4-5 farver_2.0.3 hms_0.5.3 digest_0.6.25 [41] stringi_1.4.6 openxlsx_4.1.5 grid_4.0.2 tools_4.0.2 [45] magrittr_1.5 tibble_3.0.2 crayon_1.3.4 tidyr_1.1.0 [49] car_3.0-8 pkgconfig_2.0.3 ellipsis_0.3.1 R6_2.4.1 [53] compiler_4.0.2 .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/31/ggplot_recipes-Copy.html",
            "relUrl": "/r/2021/05/31/ggplot_recipes-Copy.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "DOE",
            "content": "TOC . use of the packages rsm and FrF2 for creating tables for factorial design | fractional factorial design | Plackett-Burman design | . | . library (dplyr, warn.conflicts = FALSE) library (rsm, warn.conflicts = FALSE) library (FrF2, warn.conflicts = FALSE) # in order tu suppress messages from the loaded libraries # see https://stackoverflow.com/a/39137111/6483091 #Full Factorial n=2 2 levels ff2x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;)) ff2x2 #Full Factorial n=3 ff3x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;)) ff3x2 #Full Factorial n=4 ff4x2 &lt;-expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;), D = c(&quot;+&quot;, &quot;-&quot;)) ff4x2 #Full Factorial n=5 ff5x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;),D = c(&quot;+&quot;, &quot;-&quot;), E= c(&quot;+&quot;,&quot;-&quot;)) ff5x2 #Fractional Factorial nfactor=4, nruns=8 frfr4x8runs &lt;- FrF2(nruns=8,nfactors=4) frfr4x8runs #Fractional Factorial nfactor=5, nruns=16 frfr5x16runs &lt;- FrF2(nruns=16,nfactors=5) frfr5x16runs #Fractional Factorial nfactor=6, nruns=32 frfr6x32runs &lt;- FrF2(nruns=32,nfactors=6) frfr6x32runs #Fractional Factorial nfactor=7, nruns=64 frfr7x16runs &lt;- FrF2(nruns=32,nfactors=7) frfr7x16runs . A data.frame: 4 × 2 AB . &lt;fct&gt;&lt;fct&gt; . + | + | . - | + | . + | - | . - | - | . A data.frame: 8 × 3 ABC . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . + | + | + | . - | + | + | . + | - | + | . - | - | + | . + | + | - | . - | + | - | . + | - | - | . - | - | - | . A data.frame: 16 × 4 ABCD . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . + | + | + | + | . - | + | + | + | . + | - | + | + | . - | - | + | + | . + | + | - | + | . - | + | - | + | . + | - | - | + | . - | - | - | + | . + | + | + | - | . - | + | + | - | . + | - | + | - | . - | - | + | - | . + | + | - | - | . - | + | - | - | . + | - | - | - | . - | - | - | - | . A data.frame: 32 × 5 ABCDE . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . + | + | + | + | + | . - | + | + | + | + | . + | - | + | + | + | . - | - | + | + | + | . + | + | - | + | + | . - | + | - | + | + | . + | - | - | + | + | . - | - | - | + | + | . + | + | + | - | + | . - | + | + | - | + | . + | - | + | - | + | . - | - | + | - | + | . + | + | - | - | + | . - | + | - | - | + | . + | - | - | - | + | . - | - | - | - | + | . + | + | + | + | - | . - | + | + | + | - | . + | - | + | + | - | . - | - | + | + | - | . + | + | - | + | - | . - | + | - | + | - | . + | - | - | + | - | . - | - | - | + | - | . + | + | + | - | - | . - | + | + | - | - | . + | - | + | - | - | . - | - | + | - | - | . + | + | - | - | - | . - | + | - | - | - | . + | - | - | - | - | . - | - | - | - | - | . A design: 8 × 4 ABCD . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 11 | -1 | 1 | -1 | . 2-1 | -1 | -1 | -1 | . 3-1 | 1 | -1 | 1 | . 4-1 | -1 | 1 | 1 | . 51 | 1 | 1 | 1 | . 61 | 1 | -1 | -1 | . 71 | -1 | -1 | 1 | . 8-1 | 1 | 1 | -1 | . A design: 16 × 5 ABCDE . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 1-1 | -1 | 1 | 1 | 1 | . 2-1 | -1 | 1 | -1 | -1 | . 31 | 1 | -1 | 1 | -1 | . 41 | -1 | -1 | 1 | 1 | . 51 | -1 | -1 | -1 | -1 | . 6-1 | -1 | -1 | -1 | 1 | . 7-1 | 1 | 1 | 1 | -1 | . 81 | 1 | -1 | -1 | 1 | . 9-1 | 1 | 1 | -1 | 1 | . 101 | -1 | 1 | -1 | 1 | . 11-1 | 1 | -1 | 1 | 1 | . 12-1 | -1 | -1 | 1 | -1 | . 131 | -1 | 1 | 1 | -1 | . 14-1 | 1 | -1 | -1 | -1 | . 151 | 1 | 1 | -1 | -1 | . 161 | 1 | 1 | 1 | 1 | . A design: 32 × 6 ABCDEF . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 1-1 | 1 | 1 | -1 | -1 | -1 | . 21 | 1 | -1 | -1 | 1 | 1 | . 31 | 1 | 1 | 1 | -1 | -1 | . 41 | 1 | -1 | 1 | -1 | 1 | . 51 | -1 | 1 | 1 | 1 | -1 | . 61 | 1 | 1 | -1 | -1 | 1 | . 71 | -1 | -1 | 1 | -1 | -1 | . 81 | -1 | -1 | 1 | 1 | 1 | . 91 | 1 | 1 | 1 | 1 | 1 | . 10-1 | -1 | 1 | 1 | -1 | -1 | . 111 | 1 | 1 | -1 | 1 | -1 | . 12-1 | 1 | -1 | -1 | 1 | -1 | . 13-1 | -1 | 1 | -1 | 1 | -1 | . 141 | -1 | 1 | -1 | 1 | 1 | . 151 | -1 | -1 | -1 | 1 | -1 | . 161 | -1 | 1 | -1 | -1 | -1 | . 17-1 | 1 | -1 | 1 | -1 | -1 | . 18-1 | -1 | -1 | 1 | -1 | 1 | . 19-1 | -1 | -1 | -1 | -1 | -1 | . 201 | -1 | 1 | 1 | -1 | 1 | . 21-1 | -1 | 1 | -1 | -1 | 1 | . 22-1 | -1 | -1 | 1 | 1 | -1 | . 231 | 1 | -1 | -1 | -1 | -1 | . 24-1 | -1 | -1 | -1 | 1 | 1 | . 25-1 | -1 | 1 | 1 | 1 | 1 | . 26-1 | 1 | -1 | 1 | 1 | 1 | . 27-1 | 1 | 1 | 1 | -1 | 1 | . 28-1 | 1 | -1 | -1 | -1 | 1 | . 291 | -1 | -1 | -1 | -1 | 1 | . 301 | 1 | -1 | 1 | 1 | -1 | . 31-1 | 1 | 1 | -1 | 1 | 1 | . 32-1 | 1 | 1 | 1 | 1 | -1 | . A design: 32 × 7 ABCDEFG . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 1-1 | 1 | 1 | -1 | 1 | -1 | 1 | . 2-1 | -1 | 1 | -1 | -1 | 1 | 1 | . 31 | -1 | -1 | 1 | -1 | 1 | 1 | . 41 | 1 | -1 | -1 | 1 | -1 | -1 | . 5-1 | 1 | 1 | 1 | -1 | -1 | 1 | . 61 | 1 | 1 | -1 | -1 | 1 | 1 | . 71 | -1 | 1 | -1 | 1 | -1 | 1 | . 8-1 | -1 | -1 | -1 | 1 | -1 | -1 | . 9-1 | -1 | 1 | -1 | 1 | 1 | -1 | . 10-1 | -1 | -1 | -1 | -1 | -1 | 1 | . 11-1 | 1 | 1 | -1 | -1 | -1 | -1 | . 121 | -1 | 1 | 1 | -1 | -1 | 1 | . 13-1 | 1 | -1 | -1 | -1 | 1 | -1 | . 14-1 | -1 | -1 | 1 | -1 | -1 | -1 | . 151 | -1 | -1 | -1 | -1 | 1 | -1 | . 16-1 | -1 | 1 | 1 | 1 | 1 | 1 | . 17-1 | -1 | 1 | 1 | -1 | 1 | -1 | . 181 | 1 | 1 | -1 | 1 | 1 | -1 | . 19-1 | 1 | -1 | 1 | -1 | 1 | 1 | . 201 | 1 | -1 | 1 | -1 | -1 | -1 | . 211 | -1 | 1 | 1 | 1 | -1 | -1 | . 22-1 | 1 | -1 | -1 | 1 | 1 | 1 | . 231 | 1 | -1 | -1 | -1 | -1 | 1 | . 24-1 | -1 | -1 | 1 | 1 | -1 | 1 | . 251 | -1 | -1 | 1 | 1 | 1 | -1 | . 26-1 | 1 | -1 | 1 | 1 | 1 | -1 | . 271 | 1 | -1 | 1 | 1 | -1 | 1 | . 281 | 1 | 1 | 1 | -1 | 1 | -1 | . 291 | 1 | 1 | 1 | 1 | 1 | 1 | . 30-1 | 1 | 1 | 1 | 1 | -1 | -1 | . 311 | -1 | -1 | -1 | 1 | 1 | 1 | . 321 | -1 | 1 | -1 | -1 | -1 | -1 | . #Plackett-Burman 12 placket_burman12 &lt;- pb(12) placket_burman12 #Plackett-Burman 16 placket_burman16 &lt;- pb(16) placket_burman16 #Plackett-Burman 20 placket_burman20 &lt;- pb(20) placket_burman20 . A design: 12 × 11 ABCDEFGHJKL . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 11 | 1 | 1 | -1 | -1 | -1 | 1 | -1 | 1 | 1 | -1 | . 21 | -1 | 1 | 1 | 1 | -1 | -1 | -1 | 1 | -1 | 1 | . 31 | 1 | -1 | 1 | 1 | 1 | -1 | -1 | -1 | 1 | -1 | . 41 | 1 | -1 | -1 | -1 | 1 | -1 | 1 | 1 | -1 | 1 | . 5-1 | 1 | -1 | 1 | 1 | -1 | 1 | 1 | 1 | -1 | -1 | . 6-1 | 1 | 1 | 1 | -1 | -1 | -1 | 1 | -1 | 1 | 1 | . 7-1 | -1 | 1 | -1 | 1 | 1 | -1 | 1 | 1 | 1 | -1 | . 81 | -1 | -1 | -1 | 1 | -1 | 1 | 1 | -1 | 1 | 1 | . 9-1 | 1 | 1 | -1 | 1 | 1 | 1 | -1 | -1 | -1 | 1 | . 10-1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | . 11-1 | -1 | -1 | 1 | -1 | 1 | 1 | -1 | 1 | 1 | 1 | . 121 | -1 | 1 | 1 | -1 | 1 | 1 | 1 | -1 | -1 | -1 | . Screening 15 factors in 16 runs involves perfect aliasing of pairwise interactions of the first six factors with the last factor. . A design: 16 × 15 ABCDEFGHJKLMNOP . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 1-1 | 1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | -1 | 1 | -1 | . 21 | -1 | -1 | 1 | 1 | -1 | 1 | -1 | -1 | 1 | -1 | 1 | -1 | 1 | -1 | . 3-1 | 1 | 1 | -1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | -1 | -1 | 1 | -1 | . 41 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | . 51 | -1 | 1 | -1 | -1 | 1 | -1 | 1 | -1 | 1 | -1 | 1 | 1 | -1 | -1 | . 6-1 | -1 | 1 | 1 | 1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | -1 | 1 | . 7-1 | -1 | -1 | 1 | -1 | 1 | -1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | . 8-1 | -1 | -1 | -1 | -1 | -1 | 1 | 1 | 1 | 1 | 1 | 1 | -1 | -1 | 1 | . 91 | 1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | 1 | 1 | 1 | 1 | 1 | . 101 | -1 | -1 | -1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | . 11-1 | -1 | 1 | -1 | 1 | -1 | 1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | 1 | . 121 | 1 | -1 | 1 | -1 | 1 | 1 | 1 | -1 | -1 | -1 | -1 | -1 | -1 | 1 | . 13-1 | 1 | 1 | 1 | -1 | -1 | 1 | -1 | 1 | -1 | -1 | 1 | 1 | -1 | -1 | . 141 | -1 | 1 | 1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | -1 | -1 | 1 | -1 | . 15-1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | -1 | 1 | 1 | -1 | 1 | -1 | -1 | . 161 | 1 | 1 | -1 | 1 | -1 | -1 | -1 | 1 | 1 | -1 | -1 | -1 | -1 | 1 | . A design: 20 × 19 ABCDEFGHJKLMNOPQRST . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 1-1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | . 21 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | . 31 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | . 4-1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | . 51 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | . 61 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | . 7-1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | . 81 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | . 9-1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | . 10-1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | . 11-1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | . 12-1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | . 131 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | . 141 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | . 151 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | . 16-1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | . 171 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | . 181 | 1 | 1 | -1 | 1 | -1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | . 19-1 | 1 | -1 | -1 | -1 | -1 | 1 | 1 | -1 | 1 | 1 | -1 | -1 | 1 | 1 | 1 | 1 | -1 | 1 | . 20-1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/31/DOE.html",
            "relUrl": "/r/2021/05/31/DOE.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Simulated Dataset",
            "content": "TOC . writing a function for creating a dataset with a desired number of rows and cols given a mean and an sd (same for all cols) | writing a function for creating a small dataset (n col &lt; 5) with a desired number of rows and cols given a mean and an sd (different for each cols) | writing a function for creating a dataset (n col &gt; 5) with a desired number of rows and cols given a mean and an sd (different for each cols) | writing functions for creating automatic labels for ID and categories | . number_of_rows &lt;- 7 number_of_cols &lt;- 6 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame( replicate( number_of_cols, rnorm(n = number_of_rows, mean = my_mean, sd = my_sd )) ) # we are creating a dataframe from a matrix obtained replicating x # the desired number_of_cols a vector of length number_of_rows from # a normal distribution rnorm with a mean of my mean and standard deviation as sd #in order to print a fancy table newdat . A data.frame: 7 × 6 V1V2V3V4V5V6 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 2.321458 | 2.299545 | 1.755115 | 1.870463 | 2.056384 | 2.482437 | . 1.402577 | 2.516995 | 2.834609 | 1.863092 | 1.895504 | 2.307111 | . 2.306785 | 1.086934 | 1.663395 | 1.640607 | 2.098327 | 1.021668 | . 2.304635 | 1.754539 | 2.539501 | 1.841906 | 1.655369 | 1.674042 | . 1.904062 | 2.189214 | 2.646093 | 2.511605 | 2.371681 | 2.094404 | . 2.628779 | 1.257258 | 1.890032 | 2.057319 | 2.131018 | 1.740958 | . 1.903312 | 1.815740 | 2.140261 | 1.585239 | 1.493231 | 1.472626 | . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100,110,120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 5 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . A data.frame: 5 × 3 ABC . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 100.80638 | 108.6651 | 119.7474 | . 99.64688 | 112.5239 | 121.8453 | . 101.57203 | 109.7251 | 121.3858 | . 100.69102 | 107.9891 | 119.7400 | . 99.62137 | 108.9515 | 118.5509 | . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100, 120, 130, 145) sds=c(10 ,20 ,40 ,10) dat &lt;- lapply( seq(1,length(means)) , function(x) rnorm(number_of_rows,m = means[x], sds[x]) ) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 dictionary_size &lt;- 10 my_labels &lt;- sort( replicate( length(means), paste(sample(LETTERS[1:dictionary_size], names_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . A data.frame: 3 × 4 AIICAEHBEIGG . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 108.75016 | 131.5941 | 37.42085 | 153.1532 | . 91.07011 | 153.6062 | 149.42347 | 163.8499 | . 104.73926 | 145.7393 | 112.96202 | 144.1259 | . Same as above but shorter | . library(ggplot2) library(gridExtra) library(data.table) genDataset &lt;- function(number_of_rows,means,sds) { l &lt;- length(means) res &lt;- lapply(seq(1:l),function(x) eval(parse(text=paste(&quot;rnorm(&quot;,number_of_rows,&quot;,&quot;,means[x],&quot;)&quot;,sep=&quot;&quot;)))) data.frame((sapply(res,c))) return(res) } dat &lt;- genDataset(number_of_rows=100,means=c(90,100,105,92,91),sds=c(15,20,25,10,20)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) #we rearrange our table using melt dt.melt &lt;- melt(dt,id.vars=&quot;id&quot;) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) head(dt.melt) . A data.table: 6 × 3 idcategoryvar1 . &lt;chr&gt;&lt;fct&gt;&lt;dbl&gt; . 1 | X1 | 88.28721 | . 2 | X1 | 92.59345 | . 3 | X1 | 89.94163 | . 4 | X1 | 88.66391 | . 5 | X1 | 89.01439 | . 6 | X1 | 88.57556 | . to create sample names or labels (see https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:5] my_labels # or &lt;- my_labels &lt;- LETTERS[1:5] my_labels # or arbitrary number of letters using roman letters as in the #function # letters() or LETTERS() dictionary_size &lt;- 7 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) my_labels #sorted my_labels_sorted &lt;- sort(replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels_sorted #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) alfanum_labels . &lt;ol class=list-inline&gt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;ADEDF&#39; | &#39;FBEFE&#39; | &#39;EDDFA&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;CGCDE&#39; | &#39;FDGBB&#39; | &#39;GCAGG&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A-1&#39; | &#39;A-2&#39; | &#39;A-3&#39; | &#39;B-1&#39; | &#39;B-2&#39; | &#39;B-3&#39; | &#39;C-1&#39; | &#39;C-2&#39; | &#39;C-3&#39; | &#39;D-1&#39; | &#39;D-2&#39; | &#39;D-3&#39; | &#39;E-1&#39; | &#39;E-2&#39; | &#39;E-3&#39; | &#39;F-1&#39; | &#39;F-2&#39; | &#39;F-3&#39; | &#39;G-1&#39; | &#39;G-2&#39; | &#39;G-3&#39; | &lt;/ol&gt;",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/dataset.html",
            "relUrl": "/r/2021/05/24/dataset.html",
            "date": " • May 24, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a researcher at the National Research Council of Italy at the “Giulio Natta” Institute of Chemical Sciences and Technologies (Scitec-Cnr).I started to be interested in multivariate statistics techniques applied to data from physic-chemical analysis methods 15 years ago during my Ph.D. and to apply it to material science ever since. Enthusiast about programming in R and Python in order to write tools for everyday laboratory activities. FOSS advocate. Messy coder. I’ve written also a book on this topic: “Statistical and Multivariate Analysis in Material Science” that you can find here https://amzn.com/B08W8W5WSF .",
          "url": "https://jojosgithub.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jojosgithub.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}