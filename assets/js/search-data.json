{
  
    
        "post0": {
            "title": "Code snippets",
            "content": "to create a data set with n colums with same mean and standard deviation | . number_of_rows &lt;- 10 number_of_cols &lt;- 6 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame(replicate(number_of_cols, rnorm(n=number_of_rows, mean=my_mean, sd=my_sd ))) #we are creating a dataframe from a matrix obtained replicating x the desired number_of_cols a vector of length number_of_rows from a normal distribution rnorm with a mean of my mean and standard deviation as sd head(newdat) . A data.frame: 6 × 6 V1V2V3V4V5V6 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11.322398 | 1.997633 | 1.750965 | 2.182121 | 2.252434 | 2.479002 | . 21.595476 | 2.345698 | 1.675296 | 1.906704 | 1.522959 | 1.271384 | . 32.309575 | 1.622060 | 3.375423 | 2.383491 | 1.542155 | 1.976392 | . 41.341607 | 1.167697 | 1.484529 | 1.834667 | 2.926781 | 2.937546 | . 52.169638 | 1.736997 | 1.524017 | 2.688623 | 2.058109 | 2.252064 | . 61.030953 | 2.254386 | 1.885110 | 2.454442 | 3.325637 | 1.852907 | . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100,110,120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 50 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . A data.frame: 50 × 3 ABC . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 101.41172 | 110.4121 | 125.5185 | . 98.49940 | 110.4784 | 119.4296 | . 99.44313 | 105.7317 | 116.9115 | . 98.78634 | 110.8009 | 119.5023 | . 99.98827 | 111.4053 | 120.5793 | . 99.54834 | 109.3578 | 118.9238 | . 100.10775 | 107.6455 | 119.9235 | . 100.08334 | 113.1276 | 116.7360 | . 100.04090 | 109.3784 | 121.8826 | . 99.33038 | 110.7216 | 119.5625 | . 99.75864 | 110.6821 | 122.7145 | . 100.10948 | 112.9783 | 120.3442 | . 100.49960 | 111.6014 | 120.7228 | . 100.71527 | 110.6345 | 121.4159 | . 98.55515 | 108.9987 | 119.0925 | . 99.80328 | 107.9261 | 119.5052 | . 100.41967 | 108.8459 | 118.9055 | . 100.20765 | 108.6289 | 121.0348 | . 99.97121 | 112.0536 | 120.1457 | . 100.19516 | 110.8968 | 120.1510 | . 99.26855 | 109.9388 | 119.5406 | . 98.30118 | 112.7929 | 122.0220 | . 101.09845 | 109.0931 | 118.4314 | . 100.39214 | 110.2873 | 121.7629 | . 99.07666 | 109.7192 | 117.4796 | . 100.27345 | 109.4950 | 120.2648 | . 99.12707 | 110.0656 | 122.8751 | . 101.72369 | 113.4450 | 122.4620 | . 100.04846 | 109.1558 | 121.1512 | . 100.34441 | 109.2334 | 120.0413 | . 100.09486 | 111.6330 | 121.4478 | . 100.23337 | 110.2495 | 118.7779 | . 100.46038 | 107.9223 | 120.0318 | . 99.48121 | 108.3544 | 123.8136 | . 99.42791 | 113.2894 | 121.0000 | . 101.52847 | 107.9312 | 120.8256 | . 101.01942 | 112.2640 | 120.8712 | . 99.12636 | 111.4248 | 120.6026 | . 99.35856 | 108.4603 | 118.8620 | . 99.45709 | 109.6206 | 123.4289 | . 98.94393 | 109.9746 | 119.5673 | . 100.11051 | 111.6075 | 119.3588 | . 100.87526 | 109.4799 | 119.3936 | . 98.85810 | 109.1795 | 121.3795 | . 100.72081 | 109.6173 | 119.1438 | . 99.37932 | 110.7937 | 119.9995 | . 101.22747 | 112.3819 | 121.5048 | . 101.53854 | 107.3205 | 120.6254 | . 100.38875 | 109.9316 | 119.6101 | . 100.46413 | 110.0907 | 120.2268 | . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100,120,130,145) sds=c(10,20,40,10) dat &lt;- lapply(seq(1,length(means)), function(x) rnorm(number_of_rows,m=means[x],sds[x])) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 my_labels &lt;- sort(replicate(length(means), paste(sample(LETTERS[1:dictionary_size], names_length , replace=TRUE), collapse=&quot;&quot;))) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . A data.frame: 3 × 4 AJDCAFDGJHHI . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 101.03620 | 148.0520 | 100.5811 | 151.5095 | . 101.46831 | 151.8345 | 135.1555 | 138.0882 | . 99.87062 | 140.0476 | 189.0076 | 141.9761 | . to create sample names or labels (https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:26] # or &lt;- my_labels &lt;- LETTERS[1:26] # or arbitrary number of letters using roman letters as in the function # letters() or LETTERS() dictionary_size &lt;- 10 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace=TRUE), collapse=&quot;&quot;)) #sorted my_labels_sorted &lt;- sort(replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace=TRUE), collapse=&quot;&quot;))) #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/useful-stuff.html",
            "relUrl": "/r/2021/05/24/useful-stuff.html",
            "date": " • May 24, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a researcher at the National Research Council of Italy at the “Giulio Natta” Institute of Chemical Sciences and Technologies (Scitec-Cnr).I started to be interested in multivariate statistics techniques applied to data from physic-chemical analysis methods 15 years ago during my Ph.D. and to apply it to material science ever since. Enthusiast about programming in R and Python in order to write tools for everyday laboratory activities. FOSS advocate. Messy coder. I’ve written also a book on this topic: “Statistical and Multivariate Analysis in Material Science” that you can find here amzn.com/B08W8W5WSF .",
          "url": "https://jojosgithub.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jojosgithub.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}