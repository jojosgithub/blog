{
  
    
        "post0": {
            "title": "Simulated Dataset",
            "content": "to create a data set with n colums with same mean and standard deviation | . number_of_rows &lt;- 10 number_of_cols &lt;- 6 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame( replicate( number_of_cols, rnorm(n = number_of_rows, mean = my_mean, sd = my_sd )) ) #we are creating a dataframe from a matrix obtained replicating x the desired number_of_cols a vector of length number_of_rows from a normal distribution rnorm with a mean of my mean and standard deviation as sd head(newdat) . A data.frame: 6 × 6 V1V2V3V4V5V6 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11.690504 | 1.273989 | 0.9410319 | 2.278660 | 1.762100 | 1.724929 | . 21.907054 | 1.506012 | 1.1887123 | 1.593398 | 1.678743 | 1.860177 | . 32.395591 | 1.533450 | 1.4812527 | 1.124384 | 2.354872 | 1.758949 | . 42.039787 | 1.504051 | 2.6524783 | 1.633000 | 2.619130 | 3.038763 | . 51.198748 | 2.543346 | 1.5713827 | 2.543388 | 1.015890 | 1.729694 | . 62.020301 | 2.224998 | 2.5064183 | 1.761407 | 2.225457 | 1.444580 | . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100, 110, 120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 5 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . A data.frame: 5 × 3 ABC . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 101.1820 | 113.2777 | 117.8636 | . 100.2234 | 104.6185 | 119.9460 | . 101.1258 | 108.7751 | 118.9331 | . 101.2472 | 107.7836 | 120.4090 | . 101.8446 | 110.0996 | 121.0424 | . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100, 120, 130, 145) sds=c(10 ,20 ,40 ,10) dat &lt;- lapply( seq(1,length(means)) , function(x) rnorm(number_of_rows,m = means[x], sds[x]) ) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 dictionary_size &lt;- 10 my_labels &lt;- sort( replicate( length(means), paste(sample(LETTERS[1:dictionary_size], names_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . A data.frame: 3 × 4 BCIGBEGFJJEE . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 82.74740 | 135.08212 | 145.0604 | 140.5885 | . 104.39390 | 110.53025 | 123.9206 | 136.0575 | . 94.05001 | 87.58391 | 103.4776 | 150.7749 | . to create sample names or labels (see https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:5] my_labels # or &lt;- my_labels &lt;- LETTERS[1:5] my_labels # or arbitrary number of letters using roman letters as in the #function # letters() or LETTERS() dictionary_size &lt;- 7 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) my_labels #sorted my_labels_sorted &lt;- sort(replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;))) my_labels_sorted #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) alfanum_labels . &lt;ol class=list-inline&gt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;GBCDF&#39; | &#39;AGEBC&#39; | &#39;FBCDF&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;DDCFA&#39; | &#39;FCEGE&#39; | &#39;GFECF&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A-1&#39; | &#39;A-2&#39; | &#39;A-3&#39; | &#39;B-1&#39; | &#39;B-2&#39; | &#39;B-3&#39; | &#39;C-1&#39; | &#39;C-2&#39; | &#39;C-3&#39; | &#39;D-1&#39; | &#39;D-2&#39; | &#39;D-3&#39; | &#39;E-1&#39; | &#39;E-2&#39; | &#39;E-3&#39; | &#39;F-1&#39; | &#39;F-2&#39; | &#39;F-3&#39; | &#39;G-1&#39; | &#39;G-2&#39; | &#39;G-3&#39; | &lt;/ol&gt;",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/useful-stuff.html",
            "relUrl": "/r/2021/05/24/useful-stuff.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Simulated Dataset",
            "content": "to create a data set with n colums with same mean and standard deviation | . number_of_rows &lt;- 10 number_of_cols &lt;- 6 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame( replicate( number_of_cols, rnorm(n = number_of_rows, mean = my_mean, sd = my_sd )) ) #we are creating a dataframe from a matrix obtained replicating x the desired number_of_cols a vector of length number_of_rows from a normal distribution rnorm with a mean of my mean and standard deviation as sd head(newdat) . A data.frame: 6 × 6 V1V2V3V4V5V6 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11.690504 | 1.273989 | 0.9410319 | 2.278660 | 1.762100 | 1.724929 | . 21.907054 | 1.506012 | 1.1887123 | 1.593398 | 1.678743 | 1.860177 | . 32.395591 | 1.533450 | 1.4812527 | 1.124384 | 2.354872 | 1.758949 | . 42.039787 | 1.504051 | 2.6524783 | 1.633000 | 2.619130 | 3.038763 | . 51.198748 | 2.543346 | 1.5713827 | 2.543388 | 1.015890 | 1.729694 | . 62.020301 | 2.224998 | 2.5064183 | 1.761407 | 2.225457 | 1.444580 | . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100,110,120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 5 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . A data.frame: 5 × 3 ABC . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 101.1820 | 113.2777 | 117.8636 | . 100.2234 | 104.6185 | 119.9460 | . 101.1258 | 108.7751 | 118.9331 | . 101.2472 | 107.7836 | 120.4090 | . 101.8446 | 110.0996 | 121.0424 | . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100, 120, 130, 145) sds=c(10 ,20 ,40 ,10) dat &lt;- lapply( seq(1,length(means)) , function(x) rnorm(number_of_rows,m = means[x], sds[x]) ) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 dictionary_size &lt;- 10 my_labels &lt;- sort( replicate( length(means), paste(sample(LETTERS[1:dictionary_size], names_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . A data.frame: 3 × 4 BCIGBEGFJJEE . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 82.74740 | 135.08212 | 145.0604 | 140.5885 | . 104.39390 | 110.53025 | 123.9206 | 136.0575 | . 94.05001 | 87.58391 | 103.4776 | 150.7749 | . to create sample names or labels (see https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:5] my_labels # or &lt;- my_labels &lt;- LETTERS[1:5] my_labels # or arbitrary number of letters using roman letters as in the #function # letters() or LETTERS() dictionary_size &lt;- 7 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) my_labels #sorted my_labels_sorted &lt;- sort(replicate(n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;))) my_labels_sorted #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) alfanum_labels . &lt;ol class=list-inline&gt;&#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A&#39; | &#39;B&#39; | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;GBCDF&#39; | &#39;AGEBC&#39; | &#39;FBCDF&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;DDCFA&#39; | &#39;FCEGE&#39; | &#39;GFECF&#39; | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;A-1&#39; | &#39;A-2&#39; | &#39;A-3&#39; | &#39;B-1&#39; | &#39;B-2&#39; | &#39;B-3&#39; | &#39;C-1&#39; | &#39;C-2&#39; | &#39;C-3&#39; | &#39;D-1&#39; | &#39;D-2&#39; | &#39;D-3&#39; | &#39;E-1&#39; | &#39;E-2&#39; | &#39;E-3&#39; | &#39;F-1&#39; | &#39;F-2&#39; | &#39;F-3&#39; | &#39;G-1&#39; | &#39;G-2&#39; | &#39;G-3&#39; | &lt;/ol&gt;",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/dataset.html",
            "relUrl": "/r/2021/05/24/dataset.html",
            "date": " • May 24, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a researcher at the National Research Council of Italy at the “Giulio Natta” Institute of Chemical Sciences and Technologies (Scitec-Cnr).I started to be interested in multivariate statistics techniques applied to data from physic-chemical analysis methods 15 years ago during my Ph.D. and to apply it to material science ever since. Enthusiast about programming in R and Python in order to write tools for everyday laboratory activities. FOSS advocate. Messy coder. I’ve written also a book on this topic: “Statistical and Multivariate Analysis in Material Science” that you can find here amzn.com/B08W8W5WSF .",
          "url": "https://jojosgithub.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jojosgithub.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}