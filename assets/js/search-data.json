{
  
    
        "post0": {
            "title": "GGplot Recipes",
            "content": "library(ggplot2) library(gridExtra) library(data.table) library(RColorBrewer) library(ggpubr) library(rstatix) library(ggrepel) genDataset &lt;- function(number_of_rows,means,sds) { l &lt;- length(means) res &lt;- lapply(seq(1:l),function(x) eval(parse(text=paste(&quot;rnorm(&quot;,number_of_rows,&quot;,&quot;,means[x],&quot;)&quot;,sep=&quot;&quot;)))) data.frame((sapply(res,c))) return(res) } dat &lt;- genDataset(number_of_rows=100,means=c(90,100,105,105,101,103),sds=c(30,20,25,30,30,30)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) #we rearrange our table using melt dt.melt &lt;- melt(dt) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) base &lt;- ggplot(dt.melt, aes(x=category, y=var1)) + labs(title = &quot;Title&quot;, x = &quot;xaxis lab&quot;, y = &quot;yaxis lab&quot;, subtitle = &quot;subtitle&quot;, tag = &quot;a&quot;) + theme_classic(base_size = 14) + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(size=14,face=&quot;bold&quot;), axis.text.y = element_text(size=14,face=&quot;bold&quot;)) pv &lt;- base + geom_jitter( position = position_jitter(0.15), alpha=0.5,, size = 3) ph &lt;- pv + coord_flip() pvc &lt;- pv + aes(shape = category) phc &lt;- pvc + coord_flip() pv_grey &lt;- pv + aes(color = category) + scale_color_grey() pv_sequential &lt;- pv + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) pv_diverging &lt;- pv + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) pv_qualitative &lt;- pv + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) ph_grey &lt;- ph + aes(color = category) + scale_color_grey() ph_sequential &lt;- ph + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) ph_diverging &lt;- ph + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) ph_qualitative &lt;- ph + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) pvc_grey &lt;- pvc + aes(color = category) + scale_color_grey() pvc_sequential &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) pvc_diverging &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) pvc_qualitative &lt;- pvc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) phc_grey &lt;- phc + aes(color = category) + scale_color_grey() phc_sequential &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;Reds&quot;) phc_diverging &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdGy&quot;) phc_qualitative &lt;- phc + aes(color = category) + scale_color_brewer(palette=&quot;RdYlBu&quot;) . Attaching package: &#39;rstatix&#39; The following object is masked from &#39;package:stats&#39;: filter Warning message in melt.data.table(dt): &#34;id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All non-numeric/integer/logical type columns are considered id.vars, which in this case are columns [id, ...]. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars in future.&#34; .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/31/ggplot_recipes.html",
            "relUrl": "/r/2021/05/31/ggplot_recipes.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "DOE",
            "content": "Commands for creating tables for different DOE | . library(dplyr) library(rsm) library(FrF2) #Full Factorial n=2 2 levels ff2x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;)) ff2x2 #Full Factorial n=3 ff3x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;)) ff3x2 #Full Factorial n=4 ff4x2 &lt;-expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;), D = c(&quot;+&quot;, &quot;-&quot;)) ff4x2 #Full Factorial n=5 ff5x2 &lt;- expand.grid(A = c(&quot;+&quot;, &quot;-&quot;), B = c(&quot;+&quot;, &quot;-&quot;), C = c(&quot;+&quot;, &quot;-&quot;),D = c(&quot;+&quot;, &quot;-&quot;), E= c(&quot;+&quot;,&quot;-&quot;)) ff5x2 #Fractional Factorial nfactor=4, nruns=8 frfr4x8runs &lt;- FrF2(nruns=8,nfactors=4) frfr4x8runs #Fractional Factorial nfactor=5, nruns=16 frfr5x16runs &lt;- FrF2(nruns=16,nfactors=5) frfr5x16runs #Fractional Factorial nfactor=6, nruns=32 frfr6x32runs &lt;- FrF2(nruns=32,nfactors=6) frfr6x32runs #Fractional Factorial nfactor=7, nruns=64 frfr7x16runs &lt;- FrF2(nruns=32,nfactors=7) frfr7x16runs . #Plackett-Burman 12 placket_burman12 &lt;- pb(12) placket_burman12 #Plackett-Burman 16 placket_burman16 &lt;- pb(16) placket_burman16 #Plackett-Burman 20 placket_burman20 &lt;- pb(20) placket_burman20 .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/31/doe.html",
            "relUrl": "/r/2021/05/31/doe.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Simulated Dataset",
            "content": "to create a data set with n colums with same mean and standard deviation | . number_of_rows &lt;- 7 number_of_cols &lt;- 6 my_mean &lt;- 2 my_sd &lt;- 0.5 newdat &lt;- as.data.frame( replicate( number_of_cols, rnorm(n = number_of_rows, mean = my_mean, sd = my_sd )) ) # we are creating a dataframe from a matrix obtained replicating x # the desired number_of_cols a vector of length number_of_rows from # a normal distribution rnorm with a mean of my mean and standard deviation as sd #in order to print a fancy table newdat . Code for creating small (n col &lt; 5) dataset. Each column has its own mean and sd. In the example reported we have n = 3 (A, B, C) with n row = 50. means are 100,110,120 and sd 1,2,3 | . #set.seed(42) number_of_rows &lt;- 5 A &lt;- rnorm( n=number_of_rows, mean=100, sd=1 ) B &lt;- rnorm( n=number_of_rows, mean=110, sd=2 ) C &lt;- rnorm( n=number_of_rows, mean=120, sd=2 ) dat=data.frame(A,B,C) dat . same as the one above but more useful for dataset with i columns n col &gt; 5 | . number_of_rows = 3 means=c(100, 120, 130, 145) sds=c(10 ,20 ,40 ,10) dat &lt;- lapply( seq(1,length(means)) , function(x) rnorm(number_of_rows,m = means[x], sds[x]) ) dat &lt;- as.data.frame(do.call(cbind, dat)) names_length = 3 dictionary_size &lt;- 10 my_labels &lt;- sort( replicate( length(means), paste(sample(LETTERS[1:dictionary_size], names_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels &lt;- unlist(strsplit(my_labels,&quot; &quot;)) colnames(dat) &lt;- my_labels dat . Same as above but shorter | . library(ggplot2) library(gridExtra) library(data.table) genDataset &lt;- function(number_of_rows,means,sds) { l &lt;- length(means) res &lt;- lapply(seq(1:l),function(x) eval(parse(text=paste(&quot;rnorm(&quot;,number_of_rows,&quot;,&quot;,means[x],&quot;)&quot;,sep=&quot;&quot;)))) data.frame((sapply(res,c))) return(res) } dat &lt;- genDataset(number_of_rows=100,means=c(90,100,105,92,91),sds=c(15,20,25,10,20)) dat &lt;- data.frame((sapply(dat,c))) id &lt;- rownames(dat) dat &lt;- cbind(id=id,dat) dt &lt;- data.table(dat) #we rearrange our table using melt dt.melt &lt;- melt(dt) colnames(dt.melt) &lt;- c(&quot;id&quot;,&quot;category&quot;,&quot;var1&quot;) head(dt.melt) . to create sample names or labels (see https://stackoverflow.com/a/60789938/6483091) | . my_labels &lt;- letters[1:5] my_labels # or &lt;- my_labels &lt;- LETTERS[1:5] my_labels # or arbitrary number of letters using roman letters as in the #function # letters() or LETTERS() dictionary_size &lt;- 7 label_length &lt;- 5 n_replicates &lt;- 3 #random my_labels &lt;- replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) my_labels #sorted my_labels_sorted &lt;- sort(replicate( n_replicates, paste(sample(LETTERS[1:dictionary_size], label_length, replace = TRUE), collapse=&quot;&quot;) ) ) my_labels_sorted #if you want to mix letters and numbers alfanum_labels &lt;- paste0(rep(LETTERS[1:dictionary_size], each = n_replicates), sep = &quot;-&quot;, 1:n_replicates) alfanum_labels .",
            "url": "https://jojosgithub.github.io/blog/r/2021/05/24/dataset.html",
            "relUrl": "/r/2021/05/24/dataset.html",
            "date": " • May 24, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a researcher at the National Research Council of Italy at the “Giulio Natta” Institute of Chemical Sciences and Technologies (Scitec-Cnr).I started to be interested in multivariate statistics techniques applied to data from physic-chemical analysis methods 15 years ago during my Ph.D. and to apply it to material science ever since. Enthusiast about programming in R and Python in order to write tools for everyday laboratory activities. FOSS advocate. Messy coder. I’ve written also a book on this topic: “Statistical and Multivariate Analysis in Material Science” that you can find here amzn.com/B08W8W5WSF .",
          "url": "https://jojosgithub.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jojosgithub.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}